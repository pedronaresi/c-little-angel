# C- compilation for the intermediate code
# File: testezin.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # n
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # n
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> identifier
                    # n
                    # <- identifier
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Intermediate Code **********

1: (function, main, _, _)
2: (param_list, 0, _, _)
3: (call, input, 0, t1)
4: (assign, n, t1, _)
5: (param_list, 1, _, _)
6: (set_param, n, _, _)
7: (call, output, 1, t2)
8: (halt, _, _, _)

********** Código objeto **********

main:
    0:	addi	$sp, $sp, 0
    1:	halt	
    2:	in	$t0
    3:	sw	$t0, 0($sp)
    4:	lw	$s0, 0($sp)
    5:	mov	$a0, $s0
    6:	out	$a0, 0
    7:	halt	

********** Código binário **********

instructionRAM[0] = 32'b010111_00000000000000000000000001; 	// Jump to Main
instructionRAM[1] = 32'b001011_00011_00011_0000000000000000; 	// addi
instructionRAM[2] = 32'b011101_00000000000000000000000000; 	// halt
instructionRAM[3] = 32'b010101_00000_10101_0000000000000000; 	// in
instructionRAM[4] = 32'b010000_00011_10101_0000000000000000; 	// sw
instructionRAM[5] = 32'b001111_00011_01011_0000000000000000; 	// lw
instructionRAM[6] = 32'b100000_01011_00111_0000000000000000; 	// mov
instructionRAM[7] = 32'b010110_00111_000000000000000000000; 	// out
instructionRAM[8] = 32'b011101_00000000000000000000000000; 	// halt
