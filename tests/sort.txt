# C- compilation for the intermediate code
# File: tests/sort.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # minloc
                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # x
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # k
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> identifier
                    # low
                    # <- identifier
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # k
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> vector
                    # a
                    # -> vector: position
                        # -> identifier
                        # low
                        # <- identifier
                    # <- vector: position
                    # <- vector
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # low
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 1
                        # <- constant
                    # <- arithmetic operator: right argument
                    # arithmetic operator: +
                    # <- Operator
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # i
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # i
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> identifier
                        # high
                        # <- identifier
                    # <- arithmetic operator: right argument
                    # relational operator: <
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> if
                        # -> if: test expression
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> vector
                                # a
                                # -> vector: position
                                    # -> identifier
                                    # i
                                    # <- identifier
                                # <- vector: position
                                # <- vector
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> identifier
                                # x
                                # <- identifier
                            # <- arithmetic operator: right argument
                            # relational operator: <
                            # <- Operator
                        # <- if: test expression
                        # -> if: if block
                                # -> assign
                                # -> assign: right argument
                                    # -> vector
                                    # a
                                    # -> vector: position
                                        # -> identifier
                                        # i
                                        # <- identifier
                                    # <- vector: position
                                    # <- vector
                                # <- assign: right argument
                                # -> assign: left argument
                                    # -> identifier
                                    # x
                                    # <- identifier
                                # <- assign: left argument
                                # <- assign
                                # -> assign
                                # -> assign: right argument
                                    # -> identifier
                                    # i
                                    # <- identifier
                                # <- assign: right argument
                                # -> assign: left argument
                                    # -> identifier
                                    # k
                                    # <- identifier
                                # <- assign: left argument
                                # <- assign
                        # <- if: if block
                        # -> if: else/end block
                        # <- if: else/end block
                        # <- if
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # i
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # i
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> return
                # -> return: expression
                    # -> identifier
                    # k
                    # <- identifier
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # selectionSort
                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # k
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> identifier
                    # low
                    # <- identifier
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # i
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # i
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> arithmetic operator
                        # -> arithmetic operator: left argument
                            # -> identifier
                            # high
                            # <- identifier
                        # <- arithmetic operator: left argument
                        # -> arithmetic operator: right argument
                            # -> constant
                            # 1
                            # <- constant
                        # <- arithmetic operator: right argument
                        # arithmetic operator: -
                        # <- Operator
                    # <- arithmetic operator: right argument
                    # relational operator: <
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> type int
                            # -> identifier
                            # t
                            # <- identifier
                        # <- type int

                        # -> assign
                        # -> assign: right argument
                            # -> function call
                            # minloc
                            # -> function call: arguments
                                # -> identifier
                                # a
                                # <- identifier
                                # -> identifier
                                # i
                                # <- identifier
                                # -> identifier
                                # high
                                # <- identifier
                            # <- function call: arguments
                            # <- function call
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # k
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                        # -> assign
                        # -> assign: right argument
                            # -> vector
                            # a
                            # -> vector: position
                                # -> identifier
                                # k
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # t
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                        # -> assign
                        # -> assign: right argument
                            # -> vector
                            # a
                            # -> vector: position
                                # -> identifier
                                # i
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> vector
                            # a
                            # -> vector: position
                                # -> identifier
                                # k
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: left argument
                        # <- assign
                        # -> assign
                        # -> assign: right argument
                            # -> identifier
                            # t
                            # <- identifier
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> vector
                            # a
                            # -> vector: position
                                # -> identifier
                                # i
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: left argument
                        # <- assign
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # i
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # i
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> type int
                    # -> vector
                    # vet
                    # -> vector: position
                        # -> constant
                        # 5
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 0
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # i
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # i
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 5
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> assign
                        # -> assign: right argument
                            # -> function call
                            # input
                            # -> function call: arguments
                            # <- function call: arguments
                            # <- function call
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> vector
                            # vet
                            # -> vector: position
                                # -> identifier
                                # i
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: left argument
                        # <- assign
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # i
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # i
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> function call
                # selectionSort
                # -> function call: arguments
                    # -> identifier
                    # vet
                    # <- identifier
                    # -> constant
                    # 0
                    # <- constant
                    # -> constant
                    # 5
                    # <- constant
                # <- function call: arguments
                # <- function call
                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 0
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # i
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # i
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 3
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> function call
                        # output
                        # -> function call: arguments
                            # -> vector
                            # vet
                            # -> vector: position
                                # -> identifier
                                # i
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- function call: arguments
                        # <- function call
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # i
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # i
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
        # <- function declaration
    # <- type void

# Fim da execução.

********** Intermediate Code **********

1: (function, minloc, _, _)
2: (get_param, a, _, _)
3: (get_param, low, _, _)
4: (get_param, high, _, _)
5: (assign, k, low, _)
6: (vector_value, a, low, t1)
7: (assign, x, t1, _)
8: (addition, low, 1, t2)
9: (assign, i, t2, _)
10: (label, L1, _, _)
11: (less_than, i, high, t3)
12: (jump_if_false, t3, L3, _)
13: (vector_value, a, i, t4)
14: (less_than, t4, x, t5)
15: (jump_if_false, t5, L2, _)
16: (vector_value, a, i, t6)
17: (assign, x, t6, _)
18: (assign, k, i, _)
19: (label, L2, _, _)
20: (addition, i, 1, t7)
21: (assign, i, t7, _)
22: (goto, L1, _, _)
23: (label, L3, _, _)
24: (return, k, _, _)
25: (function, selectionSort, _, _)
26: (get_param, a, _, _)
27: (get_param, low, _, _)
28: (get_param, high, _, _)
29: (assign, i, low, _)
30: (label, L4, _, _)
31: (subtraction, high, 1, t8)
32: (less_than, i, t8, t9)
33: (jump_if_false, t9, L5, _)
34: (param_list, 3, _, _)
35: (set_param, a, _, _)
36: (set_param, i, _, _)
37: (set_param, high, _, _)
38: (call, minloc, 3, t10)
39: (assign, k, t10, _)
40: (vector_value, a, k, t11)
41: (assign, t, t11, _)
42: (vector_value, a, i, t12)
43: (vector_address, a, k, t13)
44: (assign, t13, t12, _)
45: (vector_address, a, i, t14)
46: (assign, t14, t, _)
47: (addition, i, 1, t15)
48: (assign, i, t15, _)
49: (goto, L4, _, _)
50: (label, L5, _, _)
51: (return, _, _, _)
52: (function, main, _, _)
53: (assign, i, 0, _)
54: (label, L6, _, _)
55: (less_than, i, 5, t17)
56: (jump_if_false, t17, L7, _)
57: (param_list, 0, _, _)
58: (call, input, 0, t18)
59: (vector_address, vet, i, t19)
60: (assign, t19, t18, _)
61: (addition, i, 1, t20)
62: (assign, i, t20, _)
63: (goto, L6, _, _)
64: (label, L7, _, _)
65: (param_list, 3, _, _)
66: (set_param, vet, _, _)
67: (set_param, 0, _, _)
68: (set_param, 5, _, _)
69: (call, selectionSort, 3, t21)
70: (assign, i, 0, _)
71: (label, L8, _, _)
72: (less_than, i, 3, t22)
73: (jump_if_false, t22, L9, _)
74: (param_list, 1, _, _)
75: (vector_value, vet, i, t23)
76: (set_param, t23, _, _)
77: (call, output, 1, t24)
78: (addition, i, 1, t25)
79: (assign, i, t25, _)
80: (goto, L8, _, _)
81: (label, L9, _, _)
82: (halt, _, _, _)

********** Código objeto **********

minloc:
    0:	addi	$sp, $sp, 7
    1:	mov	$s0, $a0
    2:	mov	$s1, $a1
    3:	mov	$s2, $a2
    4:	sw	$s1, 0($sp)
    5:	nop	
    6:	add	$t0, $s0, $s1
    7:	lw	$t0, 0($t0)
    8:	sw	$t0, -1($sp)
    9:	nop	
    10:	addi	$t1, $s1, 1
    11:	sw	$t1, -2($sp)
    12:	nop	
.L1	
    13:	lw	$s3, -2($sp)
    14:	blt	$s3, $s2, L3
    15:	add	$t2, $s0, $s3
    16:	lw	$t2, 0($t2)
    17:	lw	$s4, -1($sp)
    18:	blt	$t2, $s4, L2
    19:	add	$t3, $s0, $s3
    20:	lw	$t3, 0($t3)
    21:	sw	$t3, -1($sp)
    22:	nop	
    23:	sw	$s3, 0($sp)
    24:	nop	
.L2	
    25:	addi	$t4, $s3, 1
    26:	sw	$t4, -2($sp)
    27:	nop	
    28:	j	L1
.L3	
    29:	lw	$s5, 0($sp)
    30:	mov	$v0, $s5
    31:	jr	$ra

selectionSort:
    32:	addi	$sp, $sp, 7
    33:	mov	$s0, $a0
    34:	mov	$s1, $a1
    35:	mov	$s2, $a2
    36:	sw	$s1, -2($sp)
    37:	nop	
.L4	
    38:	subi	$t0, $s2, 1
    39:	lw	$s3, -2($sp)
    40:	blt	$s3, $t0, L5
    41:	la	$inv, -5($sp)
    42:	mov	$a1, $s3
    43:	mov	$a2, $s2
    44:	sw	$ra, 1($sp)
    45:	nop	
    46:	jal	minloc
    47:	subi	$sp, $sp, 7
    48:	lw	$ra, 1($sp)
    49:	mov	$t1, $v0
    50:	sw	$t1, -1($sp)
    51:	nop	
    52:	lw	$s4, -1($sp)
    53:	add	$t2, $s0, $s4
    54:	lw	$t2, 0($t2)
    55:	sw	$t2, 0($sp)
    56:	nop	
    57:	lw	$s5, -2($sp)
    58:	add	$t3, $s0, $s5
    59:	lw	$t3, 0($t3)
    60:	add	$t4, $s0, $s4
    61:	sw	$t3, 0($t4)
    62:	nop	
    63:	add	$t5, $s0, $s5
    64:	lw	$s6, 0($sp)
    65:	sw	$s6, 0($t5)
    66:	nop	
    67:	addi	$t6, $s5, 1
    68:	sw	$t6, -2($sp)
    69:	nop	
    70:	j	L4
.L5	
    71:	jr	$ra

main:
    72:	addi	$sp, $sp, 5
    73:	li	$t0, 0
    74:	sw	$t0, -5($sp)
    75:	nop	
.L6	
    76:	lw	$s0, -5($sp)
    77:	li	$t1, 5
    78:	blt	$s0, $t1, L7
    79:	in	$t2
    80:	la	$s1, -4($sp)
    81:	add	$t3, $s1, $s0
    82:	sw	$t2, 0($t3)
    83:	nop	
    84:	addi	$t4, $s0, 1
    85:	sw	$t4, -5($sp)
    86:	nop	
    87:	j	L6
.L7	
    88:	la	$a2, -4($sp)
    89:	li	$a1, 0
    90:	li	$a2, 5
    91:	jal	selectionSort
    92:	mov	$t5, $v0
    93:	subi	$sp, $sp, 7
    94:	li	$t6, 0
    95:	sw	$t6, -5($sp)
    96:	nop	
.L8	
    97:	lw	$s2, -5($sp)
    98:	li	$t7, 3
    99:	blt	$s2, $t7, L9
    100:	add	$t8, $s1, $s2
    101:	lw	$t8, 0($t8)
    102:	mov	$a0, $t8
    103:	out	$a0, 0
    104:	addi	$t9, $s2, 1
    105:	sw	$t9, -5($sp)
    106:	nop	
    107:	j	L8
.L9	
    108:	reset	
    109:	halt	

********** Código binário **********

instructionRAM[0] = 32'b010111_00000000000000000001001001; 	// Jump to Main
instructionRAM[1] = 32'b001011_00011_00011_0000000000000111; 	// addi
instructionRAM[2] = 32'b100000_00111_01011_0000000000000000; 	// mov
instructionRAM[3] = 32'b100000_01000_01100_0000000000000000; 	// mov
instructionRAM[4] = 32'b100000_01001_01101_0000000000000000; 	// mov
instructionRAM[5] = 32'b010000_00011_01100_0000000000000000; 	// sw
instructionRAM[6] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[7] = 32'b000000_01011_01100_10101_00000000000; 	// add
instructionRAM[8] = 32'b001111_10101_10101_0000000000000000; 	// lw
instructionRAM[9] = 32'b010000_00011_10101_1111111111111111; 	// sw
instructionRAM[10] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[11] = 32'b001011_01100_10110_0000000000000001; 	// addi
instructionRAM[12] = 32'b010000_00011_10110_1111111111111110; 	// sw
instructionRAM[13] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[14] = 32'b001111_00011_01110_1111111111111110; 	// lw
instructionRAM[15] = 32'b011100_01110_01101_0000000000011110; 	// blt
instructionRAM[16] = 32'b000000_01011_01110_10111_00000000000; 	// add
instructionRAM[17] = 32'b001111_10111_10111_0000000000000000; 	// lw
instructionRAM[18] = 32'b001111_00011_01111_1111111111111111; 	// lw
instructionRAM[19] = 32'b011100_10111_01111_0000000000011010; 	// blt
instructionRAM[20] = 32'b000000_01011_01110_11000_00000000000; 	// add
instructionRAM[21] = 32'b001111_11000_11000_0000000000000000; 	// lw
instructionRAM[22] = 32'b010000_00011_11000_1111111111111111; 	// sw
instructionRAM[23] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[24] = 32'b010000_00011_01110_0000000000000000; 	// sw
instructionRAM[25] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[26] = 32'b001011_01110_11001_0000000000000001; 	// addi
instructionRAM[27] = 32'b010000_00011_11001_1111111111111110; 	// sw
instructionRAM[28] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[29] = 32'b010111_00000000000000000000001110; 	// j
instructionRAM[30] = 32'b001111_00011_10000_0000000000000000; 	// lw
instructionRAM[31] = 32'b100000_10000_00001_0000000000000000; 	// mov
instructionRAM[32] = 32'b011011_00000_11111_0000000000000000; 	// jr
instructionRAM[33] = 32'b001011_00011_00011_0000000000000111; 	// addi
instructionRAM[34] = 32'b100000_00111_01011_0000000000000000; 	// mov
instructionRAM[35] = 32'b100000_01000_01100_0000000000000000; 	// mov
instructionRAM[36] = 32'b100000_01001_01101_0000000000000000; 	// mov
instructionRAM[37] = 32'b010000_00011_01100_1111111111111110; 	// sw
instructionRAM[38] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[39] = 32'b001100_01101_10101_0000000000000001; 	// subi
instructionRAM[40] = 32'b001111_00011_01110_1111111111111110; 	// lw
instructionRAM[41] = 32'b011100_01110_10101_0000000001001000; 	// blt
instructionRAM[42] = 32'b010001_00011_00100_1111111111111011; 	// la
instructionRAM[43] = 32'b100000_01110_01000_0000000000000000; 	// mov
instructionRAM[44] = 32'b100000_01101_01001_0000000000000000; 	// mov
instructionRAM[45] = 32'b010000_00011_11111_0000000000000001; 	// sw
instructionRAM[46] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[47] = 32'b011010_00000000000000000000000001; 	// jal
instructionRAM[48] = 32'b001100_00011_00011_0000000000000111; 	// subi
instructionRAM[49] = 32'b001111_00011_11111_0000000000000001; 	// lw
instructionRAM[50] = 32'b100000_00001_10110_0000000000000000; 	// mov
instructionRAM[51] = 32'b010000_00011_10110_1111111111111111; 	// sw
instructionRAM[52] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[53] = 32'b001111_00011_01111_1111111111111111; 	// lw
instructionRAM[54] = 32'b000000_01011_01111_10111_00000000000; 	// add
instructionRAM[55] = 32'b001111_10111_10111_0000000000000000; 	// lw
instructionRAM[56] = 32'b010000_00011_10111_0000000000000000; 	// sw
instructionRAM[57] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[58] = 32'b001111_00011_10000_1111111111111110; 	// lw
instructionRAM[59] = 32'b000000_01011_10000_11000_00000000000; 	// add
instructionRAM[60] = 32'b001111_11000_11000_0000000000000000; 	// lw
instructionRAM[61] = 32'b000000_01011_01111_11001_00000000000; 	// add
instructionRAM[62] = 32'b010000_11001_11000_0000000000000000; 	// sw
instructionRAM[63] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[64] = 32'b000000_01011_10000_11010_00000000000; 	// add
instructionRAM[65] = 32'b001111_00011_10001_0000000000000000; 	// lw
instructionRAM[66] = 32'b010000_11010_10001_0000000000000000; 	// sw
instructionRAM[67] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[68] = 32'b001011_10000_11011_0000000000000001; 	// addi
instructionRAM[69] = 32'b010000_00011_11011_1111111111111110; 	// sw
instructionRAM[70] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[71] = 32'b010111_00000000000000000000100111; 	// j
instructionRAM[72] = 32'b011011_00000_11111_0000000000000000; 	// jr
instructionRAM[73] = 32'b001011_00011_00011_0000000000000101; 	// addi
instructionRAM[74] = 32'b010100_00000_10101_0000000000000000; 	// li
instructionRAM[75] = 32'b010000_00011_10101_1111111111111011; 	// sw
instructionRAM[76] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[77] = 32'b001111_00011_01011_1111111111111011; 	// lw
instructionRAM[78] = 32'b010100_00000_10110_0000000000000101; 	// li
instructionRAM[79] = 32'b011100_01011_10110_0000000001011001; 	// blt
instructionRAM[80] = 32'b010101_00000_10111_0000000000000000; 	// in
instructionRAM[81] = 32'b010001_00011_01100_1111111111111100; 	// la
instructionRAM[82] = 32'b000000_01100_01011_11000_00000000000; 	// add
instructionRAM[83] = 32'b010000_11000_10111_0000000000000000; 	// sw
instructionRAM[84] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[85] = 32'b001011_01011_11001_0000000000000001; 	// addi
instructionRAM[86] = 32'b010000_00011_11001_1111111111111011; 	// sw
instructionRAM[87] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[88] = 32'b010111_00000000000000000001001101; 	// j
instructionRAM[89] = 32'b010001_00011_01001_1111111111111100; 	// la
instructionRAM[90] = 32'b010100_00000_01000_0000000000000000; 	// li
instructionRAM[91] = 32'b010100_00000_01001_0000000000000101; 	// li
instructionRAM[92] = 32'b011010_00000000000000000000100001; 	// jal
instructionRAM[93] = 32'b100000_00001_11010_0000000000000000; 	// mov
instructionRAM[94] = 32'b001100_00011_00011_0000000000000111; 	// subi
instructionRAM[95] = 32'b010100_00000_11011_0000000000000000; 	// li
instructionRAM[96] = 32'b010000_00011_11011_1111111111111011; 	// sw
instructionRAM[97] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[98] = 32'b001111_00011_01101_1111111111111011; 	// lw
instructionRAM[99] = 32'b010100_00000_11100_0000000000000011; 	// li
instructionRAM[100] = 32'b011100_01101_11100_0000000001101101; 	// blt
instructionRAM[101] = 32'b000000_01100_01101_11101_00000000000; 	// add
instructionRAM[102] = 32'b001111_11101_11101_0000000000000000; 	// lw
instructionRAM[103] = 32'b100000_11101_00111_0000000000000000; 	// mov
instructionRAM[104] = 32'b010110_00111_000000000000000000000; 	// out
instructionRAM[105] = 32'b001011_01101_11110_0000000000000001; 	// addi
instructionRAM[106] = 32'b010000_00011_11110_1111111111111011; 	// sw
instructionRAM[107] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[108] = 32'b010111_00000000000000000001100010; 	// j
instructionRAM[109] = 32'b011001_00000000000000000000000000; 	// reset
instructionRAM[110] = 32'b011000_00000000000000000000000000; 	// halt
