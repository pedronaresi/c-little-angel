# C- compilation for the intermediate code
# File: tests/gcd.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # gcd
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # v
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> identifier
                        # u
                        # <- identifier
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                    # -> return
                    # -> return: expression
                        # -> function call
                        # gcd
                        # -> function call: arguments
                            # -> identifier
                            # v
                            # <- identifier
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> arithmetic operator
                                # -> arithmetic operator: left argument
                                    # -> arithmetic operator
                                    # -> arithmetic operator: left argument
                                        # -> identifier
                                        # u
                                        # <- identifier
                                    # <- arithmetic operator: left argument
                                    # -> arithmetic operator: right argument
                                        # -> identifier
                                        # v
                                        # <- identifier
                                    # <- arithmetic operator: right argument
                                    # arithmetic operator: /
                                    # <- Operator
                                # <- arithmetic operator: left argument
                                # -> arithmetic operator: right argument
                                    # -> identifier
                                    # v
                                    # <- identifier
                                # <- arithmetic operator: right argument
                                # arithmetic operator: *
                                # <- Operator
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- function call: arguments
                        # <- function call
                    # <- return: expression
                    # <- return
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # x
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # y
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # y
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # gcd
                    # -> function call: arguments
                        # -> identifier
                        # x
                        # <- identifier
                        # -> identifier
                        # y
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Intermediate Code **********

1: (function, gcd, _, _)
2: (get_param, u, _, _)
3: (get_param, v, _, _)
4: (equal, v, 0, t1)
5: (jump_if_false, t1, L1, _)
6: (return, u, _, _)
7: (goto, L2, _, _)
8: (label, L1, _, _)
9: (param_list, 2, _, _)
10: (set_param, v, _, _)
11: (division, u, v, t2)
12: (multiplication, t2, v, t3)
13: (subtraction, u, t3, t4)
14: (set_param, t4, _, _)
15: (call, gcd, 2, t5)
16: (return, t5, _, _)
17: (label, L2, _, _)
18: (return, _, _, _)
19: (function, main, _, _)
20: (param_list, 0, _, _)
21: (call, input, 0, t6)
22: (assign, x, t6, _)
23: (param_list, 0, _, _)
24: (call, input, 0, t7)
25: (assign, y, t7, _)
26: (param_list, 1, _, _)
27: (param_list, 2, _, _)
28: (set_param, x, _, _)
29: (set_param, y, _, _)
30: (call, gcd, 2, t8)
31: (set_param, t8, _, _)
32: (call, output, 1, t9)
33: (halt, _, _, _)

********** Código objeto **********

gcd:
    0:	addi	$sp, $sp, 3
    1:	mov	$s0, $a0
    2:	mov	$s1, $a1
    3:	li	$t0, 0
    4:	beq	$s1, $t0, L1
    5:	mov	$v0, $s0
    6:	jr	$ra
    7:	j	L2
.L1	
    8:	mov	$a0, $s1
    9:	lw	$s2, 0($sp)
    10:	div	$t1, $s0, $s2
    11:	mul	$t2, $t1, $s2
    12:	sub	$t3, $s0, $t2
    13:	mov	$a1, $t3
    14:	sw	$ra, 1($sp)
    15:	nop	
    16:	jal	gcd
    17:	subi	$sp, $sp, 3
    18:	lw	$ra, 1($sp)
    19:	mov	$t4, $v0
    20:	mov	$v0, $t4
    21:	jr	$ra
.L2	
    22:	jr	$ra

main:
    23:	addi	$sp, $sp, 1
    24:	in	$t0
    25:	sw	$t0, -1($sp)
    26:	nop	
    27:	in	$t1
    28:	sw	$t1, 0($sp)
    29:	nop	
    30:	lw	$s0, -1($sp)
    31:	mov	$a0, $s0
    32:	lw	$s1, 0($sp)
    33:	mov	$a1, $s1
    34:	jal	gcd
    35:	mov	$t2, $v0
    36:	subi	$sp, $sp, 3
    37:	mov	$a0, $t2
    38:	out	$a0, 0
    39:	reset	
    40:	halt	

********** Código binário **********

instructionRAM[0] = 32'b010111_00000000000000000000011000; 	// Jump to Main
instructionRAM[1] = 32'b001011_00011_00011_0000000000000011; 	// addi
instructionRAM[2] = 32'b100000_00111_01011_0000000000000000; 	// mov
instructionRAM[3] = 32'b100000_01000_01100_0000000000000000; 	// mov
instructionRAM[4] = 32'b010100_00000_10101_0000000000000000; 	// li
instructionRAM[5] = 32'b001001_01100_10101_0000000000001001; 	// beq
instructionRAM[6] = 32'b100000_01011_00001_0000000000000000; 	// mov
instructionRAM[7] = 32'b011011_00000_11111_0000000000000000; 	// jr
instructionRAM[8] = 32'b010111_00000000000000000000010111; 	// j
instructionRAM[9] = 32'b100000_01100_00111_0000000000000000; 	// mov
instructionRAM[10] = 32'b001111_00011_01101_0000000000000000; 	// lw
instructionRAM[11] = 32'b01101_01011_01101_10110_00000000000; 	// div
instructionRAM[12] = 32'b000110_10110_01101_10111_00000000000; 	// mul
instructionRAM[13] = 32'b000001_01011_10111_11000_00000000000; 	// sub
instructionRAM[14] = 32'b100000_11000_01000_0000000000000000; 	// mov
instructionRAM[15] = 32'b010000_00011_11111_0000000000000001; 	// sw
instructionRAM[16] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[17] = 32'b011010_00000000000000000000000001; 	// jal
instructionRAM[18] = 32'b001100_00011_00011_0000000000000011; 	// subi
instructionRAM[19] = 32'b001111_00011_11111_0000000000000001; 	// lw
instructionRAM[20] = 32'b100000_00001_11001_0000000000000000; 	// mov
instructionRAM[21] = 32'b100000_11001_00001_0000000000000000; 	// mov
instructionRAM[22] = 32'b011011_00000_11111_0000000000000000; 	// jr
instructionRAM[23] = 32'b011011_00000_11111_0000000000000000; 	// jr
instructionRAM[24] = 32'b001011_00011_00011_0000000000000001; 	// addi
instructionRAM[25] = 32'b010101_00000_10101_0000000000000000; 	// in
instructionRAM[26] = 32'b010000_00011_10101_1111111111111111; 	// sw
instructionRAM[27] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[28] = 32'b010101_00000_10110_0000000000000000; 	// in
instructionRAM[29] = 32'b010000_00011_10110_0000000000000000; 	// sw
instructionRAM[30] = 32'b100010_00000000000000000000000000; 	// nop
instructionRAM[31] = 32'b001111_00011_01011_1111111111111111; 	// lw
instructionRAM[32] = 32'b100000_01011_00111_0000000000000000; 	// mov
instructionRAM[33] = 32'b001111_00011_01100_0000000000000000; 	// lw
instructionRAM[34] = 32'b100000_01100_01000_0000000000000000; 	// mov
instructionRAM[35] = 32'b011010_00000000000000000000000001; 	// jal
instructionRAM[36] = 32'b100000_00001_10111_0000000000000000; 	// mov
instructionRAM[37] = 32'b001100_00011_00011_0000000000000011; 	// subi
instructionRAM[38] = 32'b100000_10111_00111_0000000000000000; 	// mov
instructionRAM[39] = 32'b010110_00111_000000000000000000000; 	// out
instructionRAM[40] = 32'b011001_00000000000000000000000000; 	// reset
instructionRAM[41] = 32'b011000_00000000000000000000000000; 	// halt
